package occ.cs272.ic07;

/**
 *  CS 272 Example and Exercises: JMenuDemo
 *
 *  Icons, HotKeys, Accelerators, Dialogs
 *
 *  @author Stephen Gilbert
 *  @version Spring 2016
 *
 */
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;

public class JMenuDemo  extends JPanel
{
    /**
     * Install a menu on a JFrame
     */
    private void installMenu(JFrame frame)
    {
        // 1. Create a menu bar
        JMenuBar mb = new JMenuBar();
        frame.setJMenuBar(mb);

        // 2. Create 3 top-level menus
        // Exercise # 2: add mnemonics to top-level menus (F, E)
        JMenu file = new JMenu("File");
        JMenu edit = new JMenu("Edit");
        JMenu color = new JMenu("Color");

        mb.add(file);
        mb.add(edit);

        // Exercise # 1: add icons to menu items
        // Exercise # 2: add mnemonics to menu items
        /**
         *  File menu items
         *  Icons in images folder: New16.gif, Open16.gif
         *  Mnemonics: N, O, X
         */
        JMenuItem fileNew = new JMenuItem("New");
        JMenuItem fileOpen = new JMenuItem("Open");
        JMenuItem fileExit = new JMenuItem("Exit");

        // Exercise #3 - Add an accelerator for the Exit menu
        
        // Hook them up using a helper method
        setActionHandler(fileNew, fileOpen, fileExit);

        /**
         *  Edit menu items
         *  Icons in images folder: Cut16.gif, Copy16.gif, Paste16.gif
         *  Exercise 15 - make these instance variables instead
         */
        JMenuItem editCut = new JMenuItem("Cut");
        JMenuItem editCopy = new JMenuItem("Copy");
        JMenuItem editPaste = new JMenuItem("Paste");

        int LEFT = SwingConstants.LEFT;
        editCut.setHorizontalTextPosition(LEFT);
        editCopy.setHorizontalTextPosition(LEFT);
        editPaste.setHorizontalTextPosition(LEFT);

        // Hook them up using a helper method
        setActionHandler(editCut, editCopy, editPaste);
        
        /**
         *  Color menu items
         */
        JMenuItem colorFg = new JMenuItem("Foreground ...");
        JMenuItem colorBg = new JMenuItem("Background ...");
        
        // Hook them up using a helper method
        setActionHandler(colorFg, colorBg);
        
        // Add components to menus
        file.add(fileNew);
        file.add(fileOpen);
        file.addSeparator();
        file.add(fileExit);

        edit.add(editCut);
        edit.add(editCopy);
        edit.add(editPaste);
        edit.add(color);    // Add color menu to edit menu

        color.add(colorFg);
        color.add(colorBg);

        // Exercise #4: add a Font menu
        //  - 4 JRadioButtonMenuItems: eightPt, tenPt, twelvePt, sixteenPt
        //  - Add them to a ButtonGroup
        //  - Add all 4 along with 2 checkbox items to Font menu
        //  - Hook up all radio buttons items to action listener
        //  - Hook up checkbox items to itemlistener
        
    }
    
    /**
     *  Constructs and populates the main panel.
     */
    public JMenuDemo()
    {
        setLayout(new BorderLayout());
        add(new JScrollPane(output), BorderLayout.CENTER);
        output.setFont(new Font("Monospaced", Font.PLAIN, 12));
        output.setBorder(BorderFactory.createEmptyBorder(2, 5, 2, 5));
    }

    /**
     * Private helper method to add a group of handlers
     * @param items variable argument list
     */
    private void setActionHandler(JMenuItem...items)
    {
        for (JMenuItem item : items)
            item.addActionListener(actionHandler);
    }
    
    /**
     * Simple general action handler.
     */
    private ActionListener actionHandler = new ActionListener() 
    {
        /**
         * Handle the events generated by the menu
         */
        public void actionPerformed(ActionEvent e)
        {
            String cmd = e.getActionCommand();

            if (cmd.equals("Open"))
                System.out.println("Open");
            else if (cmd.equals("New"))
                System.out.println("New");
            else if (cmd.equals("Exit"))
                System.exit(0);
            else if (cmd.equals("Cut"))
                output.cut();
            else if (cmd.equals("Copy"))
                output.copy();
            else if (cmd.equals("Paste"))
                output.paste();
            else if (cmd.equals("Foreground ..."))
                System.out.println("Foreground");
            else if (cmd.equals("Background ..."))
                System.out.println("Background");
            else if (cmd.equals("8 pt"))
                setNewFont(8);
            else if (cmd.equals("10 pt"))
                setNewFont(10);
            else if (cmd.equals("12 pt"))
                setNewFont(12);
            else if (cmd.equals("16 pt"))
                setNewFont(16);
        }
    };

    /**
     *  Handle messages from the checkboxes
     */
    private ItemListener itemHandler = new ItemListener() 
    {
        public void itemStateChanged(ItemEvent e)
        {
            // don't care what happened. Just reset font style
            setNewFont(output.getFont().getSize());
        }
    };

    /**
     *  Changes the fonts when the font menu is invoked
     */
    private void setNewFont(int ptSize)
    {
        int fontStyle = Font.PLAIN +
            (bold.getState() ? Font.BOLD : 0) +
            (italic.getState() ? Font.ITALIC : 0);

        Font f = output.getFont();
        output.setFont(new Font(f.getName(), fontStyle, ptSize));
    }

    // Exercise # 5: handle Menu Enabling and Disabling
    private MenuListener menuHandler = new MenuListener() 
    {
        public void menuSelected(MenuEvent e)
        {
            // Enable cut when output.getSelectionStart() not equal to end
            // Enable copy in the same circumstances
            // Enable paste when
            /*
                Toolkit.getDefaultToolkit()
                    .getSystemClipboard()
                    .getContents("") != null
            */
        }
        public void menuDeselected(MenuEvent e) { }
        public void menuCanceled(MenuEvent e)   { }
    };

    /**
     * Instance variables.
     */
    private JTextArea output = new JTextArea();
    private JCheckBoxMenuItem bold = new JCheckBoxMenuItem("Bold");
    private JCheckBoxMenuItem italic = new JCheckBoxMenuItem("Italic");
    
    
    // Stuff you can customize
    private static String appName = "JMenuBar Demo";
    private static int DEFAULT_WIDTH = 500;
    private static int DEFAULT_HEIGHT = 350;
    
    
    /**
     * Generic main() method for SwingGUI App
     * @param args
     */
    public static void main(String[] args)
    {
        // Set the system look and feel
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) { /* nothing to do */}
        
        // Always start Swing programs on the event queue
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame mainFrame = new JFrame(appName);
                mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                JMenuDemo app = new JMenuDemo();
                app.installMenu(mainFrame);
                mainFrame.getContentPane().add(app);
                mainFrame.setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);
                mainFrame.setVisible(true);
            }
         });
    }
    
}
