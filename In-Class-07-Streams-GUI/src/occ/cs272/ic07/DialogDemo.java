package occ.cs272.ic07;

import javax.swing.*;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
public class DialogDemo extends JPanel
{
    /**
     *  Constructor
     */
    public DialogDemo()
    {
        setLayout(new BorderLayout());
        add(canvas, BorderLayout.CENTER);
    }
    
    /**
     * Install the menu on the JFrame
     */
    private void installMenu(JFrame frame)
    {
        // Menu bar
        JMenuBar bar = new JMenuBar();
        frame.setJMenuBar(bar);

        // Dialog menu and menu items
        JMenu dialogMenu = new JMenu("Dialog");
        dialogMenu.add(message);
        dialogMenu.addSeparator();
        dialogMenu.add(plain);
        dialogMenu.add(error);
        dialogMenu.add(info);
        dialogMenu.add(question);
        dialogMenu.add(warning);
        bar.add(dialogMenu);

        // Feedback Menu and menu items
        JMenu feedbackMenu = new JMenu("Feedback");
        feedbackMenu.add(confirm);
        feedbackMenu.add(option);
        feedbackMenu.add(input);
        bar.add(feedbackMenu);

        // File menu and menu items
        JMenu fileMenu = new JMenu("File");
        fileMenu.add(open);
        bar.add(fileMenu);

        // Color menu and menu items
        JMenu colorMenu = new JMenu("Color");
        colorMenu.add(choose);
        bar.add(colorMenu);
        
        // Hook up all of the event handlers using a helper method
        setActionHandler(message, plain, error, info, question,
                warning, confirm, option, input, open, choose);
    }    

    /**
     * Private helper method to add a group of handlers
     * @param items variable argument list
     */
    private void setActionHandler(JMenuItem...items)
    {
        for (JMenuItem item : items)
            item.addActionListener(actionHandler);
    }
    

    /**
     * A simple event handler for all buttons.
     */
    private ActionListener actionHandler = new ActionListener() 
    {
        /**
         * Handle the events generated by the menu
         */
        public void actionPerformed(ActionEvent e)
        {
            Object source = e.getSource();
            
            if (source == message)
                JOptionPane.showMessageDialog(
                    null,                       // parent (center on screen)
                    "Your message goes here");  // message
            else if (source == plain)
                JOptionPane.showMessageDialog(
                    DialogDemo.this,            // parent (center on frame)
                    "Very Plain",               // message in window
                    "Plain message",            // title of dialog window
                    JOptionPane.PLAIN_MESSAGE); // type of "decoration"
            else if (source == error)
                JOptionPane.showMessageDialog(
                    DialogDemo.this,
                    "Made an Error",
                    "Error message",
                    JOptionPane.ERROR_MESSAGE);
            else if (source == info)
                JOptionPane.showMessageDialog(
                    DialogDemo.this,
                    "Information",
                    "Some Info",
                    JOptionPane.INFORMATION_MESSAGE);
            else if (source == question)
                JOptionPane.showMessageDialog(
                    DialogDemo.this,
                    "?????????",
                    "?????",
                    JOptionPane.QUESTION_MESSAGE);
            else if (source == warning)
                JOptionPane.showMessageDialog(
                    DialogDemo.this,
                    "This is a warning",
                    "Uh-oh!!",
                    JOptionPane.WARNING_MESSAGE);
            else if (source == confirm)
            {
                int answer =
                    JOptionPane.showConfirmDialog(
                        DialogDemo.this,
                        "Do you like Java?");
                if (answer == JOptionPane.YES_OPTION)
                    JOptionPane.showMessageDialog(DialogDemo.this,"Great!");
            }
            else if (source == option)
            {
                int answer =
                    JOptionPane.showOptionDialog(
                        DialogDemo.this,
                        "How do you like CS 272?",
                        "Progress",
                        JOptionPane.DEFAULT_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        new ImageIcon(getClass().getResource("images/sg_ship.jpg")),
                        new String[] {"It's Great","It Bites"},
                        "It's Great");
                if (answer == 0)
                    JOptionPane.showMessageDialog(DialogDemo.this,"Great!");
            }
            else if (source == input)
            {
                String name = JOptionPane.showInputDialog
                              (DialogDemo.this,"Please enter your name");
                JOptionPane.showMessageDialog(DialogDemo.this,"Hi " + name);
            }
            else if (source == open)
            {
                JFileChooser jfc = new JFileChooser();

                int answer = jfc.showOpenDialog(DialogDemo.this);

                if (answer == JFileChooser.APPROVE_OPTION)
                {
                    File file = jfc.getSelectedFile();
                    JFrame f = new JFrame(file.getName());
                    Container c = f.getContentPane();
                    JTextArea text = new JTextArea(10,50);
                    JScrollPane scroll = new JScrollPane(text);
                    c.add(scroll, BorderLayout.CENTER);
                    int length = (int)file.length();
                    char[] buffer = new char[length];
                    try
                    {
                        BufferedReader br =
                            new BufferedReader(new FileReader(file));
                        try {
                            br.read(buffer);
                            text.setText(new String(buffer));
                            f.pack();
                            f.setLocation(300,200);
                            f.setVisible(true);
                        }
                        finally {
                            br.close();
                        }
                    }
                    catch(IOException ex)
                    {
                        ex.printStackTrace();
                    }
                }
            }
            else if (source == choose)
            {
                color = JColorChooser.showDialog
                        (DialogDemo.this,"Choose a color",Color.yellow);
                repaint();
            }
        }
    };
    
    /**
     * DrawOn - display a message in center 
     * @author Stephen Gilbert
     * @version Spring 2016
     */
    class DrawOn extends JPanel
    {
        public DrawOn()
        {
            setBackground(Color.WHITE);
            setOpaque(true);
        }
        
        public void paintComponent(Graphics g)
        {
            super.paintComponent(g);
            Color oldColor = g.getColor();
            g.setColor(color);
            g.setFont(new Font("Serif",Font.BOLD + Font.ITALIC,36));
            g.drawString("Have a good day", 50, 75);
            g.setColor(oldColor);
        }
    }

    /**
     * Instance variables
     */
    private JMenuItem message = new JMenuItem("Message");
    private JMenuItem plain = new JMenuItem("Plain");
    private JMenuItem error = new JMenuItem("Error");
    private JMenuItem info = new JMenuItem("Info");
    private JMenuItem question = new JMenuItem("Question");
    private JMenuItem warning = new JMenuItem("Warning");
    private JMenuItem confirm = new JMenuItem("Confirm");
    private JMenuItem option = new JMenuItem("Option");
    private JMenuItem input = new JMenuItem("Input");
    private JMenuItem open = new JMenuItem("Open");
    private JMenuItem choose = new JMenuItem("Choose");

    // Color used when repainting canvas
    private Color color = Color.BLACK;
    private DrawOn canvas = new DrawOn();

    // Stuff you can customize
    private static String appName = "Menu Dialog Demo";
    private static int DEFAULT_WIDTH = 400;
    private static int DEFAULT_HEIGHT = 200;
    
    
    /**
     * Generic main() method for SwingGUI App
     * @param args
     */
    public static void main(String[] args)
    {
        // Set the system look and feel
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) { /* nothing to do */}
        
        // Always start Swing programs on the event queue
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame mainFrame = new JFrame(appName);
                mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                DialogDemo app = new DialogDemo();
                app.installMenu(mainFrame);
                mainFrame.getContentPane().add(app);
                mainFrame.setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);
                mainFrame.setVisible(true);
            }
         });
    }

}
